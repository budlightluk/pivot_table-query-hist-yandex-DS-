{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6e229eb1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_time</th>\n",
       "      <th>id</th>\n",
       "      <th>time_spent</th>\n",
       "      <th>name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>20180406T165358</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>98.0</td>\n",
       "      <td>Василёк</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20180404T173913</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>15.0</td>\n",
       "      <td>Василёк</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>20180403T172824</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>220.0</td>\n",
       "      <td>Василёк</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>20180407T070441</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>19.0</td>\n",
       "      <td>Василёк</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20180404T132049</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>14.0</td>\n",
       "      <td>Василёк</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>20180403T144234</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Василёк</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>20180402T082321</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>555.0</td>\n",
       "      <td>Василёк</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>20180407T003408</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>286.0</td>\n",
       "      <td>Василёк</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>20180404T084711</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>14.0</td>\n",
       "      <td>Василёк</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>20180405T131939</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>248.0</td>\n",
       "      <td>Василёк</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date_time        id  time_spent     name\n",
       "0  20180406T165358  76144fb2        98.0  Василёк\n",
       "1  20180404T173913  76144fb2        15.0  Василёк\n",
       "2  20180403T172824  76144fb2       220.0  Василёк\n",
       "3  20180407T070441  76144fb2        19.0  Василёк\n",
       "4  20180404T132049  76144fb2        14.0  Василёк\n",
       "5  20180403T144234  76144fb2         5.0  Василёк\n",
       "6  20180402T082321  76144fb2       555.0  Василёк\n",
       "7  20180407T003408  76144fb2       286.0  Василёк\n",
       "8  20180404T084711  76144fb2        14.0  Василёк\n",
       "9  20180405T131939  76144fb2       248.0  Василёк"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df = pd.read_csv('visits.csv', sep='\\t')\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f98c98f1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "317104"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "957c4316",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Количество заездов:  317104\n"
     ]
    }
   ],
   "source": [
    "print(\"Количество заездов: \", df.shape[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "604ae8f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "471\n"
     ]
    }
   ],
   "source": [
    "unique_ids = df['id'].unique()\n",
    "count = len(unique_ids)\n",
    "print(count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "a4c700dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20180402T000008\n"
     ]
    }
   ],
   "source": [
    "print(df['date_time'].min())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "adfe4f8c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20180408T235957\n"
     ]
    }
   ],
   "source": [
    "print(df['date_time'].max())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "0bf1190a",
   "metadata": {},
   "outputs": [],
   "source": [
    "visits = (df.shape[0]/count) / 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "44474dd3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "количество заездов на АЗС в сутки:  96\n"
     ]
    }
   ],
   "source": [
    "print(\"количество заездов на АЗС в сутки: \",round(visits))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "b68981ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name\n",
       "Календула      85648\n",
       "Василёк        79006\n",
       "Георгина       34356\n",
       "Немезия        20138\n",
       "Колокольчик    18835\n",
       "Мальва         17386\n",
       "Гейхера        14125\n",
       "Доротеантус     6312\n",
       "Нарцисс         3640\n",
       "Амарант         3221\n",
       "dtype: int64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "names = df.value_counts('name')\n",
    "names.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "62031f7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Василёк' 'Белоцветник' 'Роза' 'Лаватера' 'Георгина' 'Астильба'\n",
      " 'Колокольчик' 'Мальва' 'Тюльпан' 'Календула' 'Немезия' 'Функия' 'Люпин'\n",
      " 'Ромашка' 'Амарант' 'Вероника' 'Диморфотека' 'Малопа' 'Гейхера'\n",
      " 'Лобулярия' 'Вербена' 'Гвоздика' 'Пион' 'Хризантема' 'Незабудка'\n",
      " 'Бархатцы' 'Аммобиум' 'Арктотис' 'Левкой' 'Обриета' 'Настурция' 'Крокус'\n",
      " 'Подснежник' 'Петуния' 'Доротеантус' 'Агератум' 'Гелихризум' 'Годеция'\n",
      " 'Космос' 'Гацания' 'Бегония' 'Нарцисс' 'Фасоль' 'Бальзамин' 'Ирис']\n"
     ]
    }
   ],
   "source": [
    "unique_names = df['name'].unique()\n",
    "print(unique_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "5f5dfa61",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['time_spent'].hist(bins=100, range =(0, 1500))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "c6feaaf6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.boxplot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "66011c2e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.ylim(-100, 1000)\n",
    " \n",
    "df.boxplot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "c1db0525",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time_spent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>317104.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>203.382294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>395.754791</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>19.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>108.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>274.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>28925.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          time_spent\n",
       "count  317104.000000\n",
       "mean      203.382294\n",
       "std       395.754791\n",
       "min         0.000000\n",
       "25%        19.000000\n",
       "50%       108.000000\n",
       "75%       274.000000\n",
       "max     28925.000000"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe() \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d09fa884",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>From</th>\n",
       "      <th>To</th>\n",
       "      <th>Is_Direct</th>\n",
       "      <th>Has_luggage</th>\n",
       "      <th>Price</th>\n",
       "      <th>Date_From</th>\n",
       "      <th>Date_To</th>\n",
       "      <th>Airline</th>\n",
       "      <th>Travel_time_from</th>\n",
       "      <th>Travel_time_to</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Moscow</td>\n",
       "      <td>Rome</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>21032</td>\n",
       "      <td>data.07.19</td>\n",
       "      <td>07.07.19</td>\n",
       "      <td>Belavia</td>\n",
       "      <td>995</td>\n",
       "      <td>350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Moscow</td>\n",
       "      <td>Rome</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>19250</td>\n",
       "      <td>data.07.19</td>\n",
       "      <td>07.07.19</td>\n",
       "      <td>S7</td>\n",
       "      <td>230</td>\n",
       "      <td>225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>St. Petersburg</td>\n",
       "      <td>Rome</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>193</td>\n",
       "      <td>04.07.2data9</td>\n",
       "      <td>10.07.2data9</td>\n",
       "      <td>Finnair</td>\n",
       "      <td>605</td>\n",
       "      <td>720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>St. Petersburg</td>\n",
       "      <td>Barcelona</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>268</td>\n",
       "      <td>03.07.2data9</td>\n",
       "      <td>09.07.2data9</td>\n",
       "      <td>Swiss</td>\n",
       "      <td>365</td>\n",
       "      <td>355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>St. Petersburg</td>\n",
       "      <td>Barcelona</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>31425</td>\n",
       "      <td>05.07.2data9</td>\n",
       "      <td>11.07.2data9</td>\n",
       "      <td>Rossiya</td>\n",
       "      <td>255</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             From         To  Is_Direct  Has_luggage  Price     Date_From  \\\n",
       "0          Moscow       Rome      False         True  21032    data.07.19   \n",
       "1          Moscow       Rome       True        False  19250    data.07.19   \n",
       "2  St. Petersburg       Rome      False        False    193  04.07.2data9   \n",
       "3  St. Petersburg  Barcelona      False         True    268  03.07.2data9   \n",
       "4  St. Petersburg  Barcelona       True        False  31425  05.07.2data9   \n",
       "\n",
       "        Date_To  Airline  Travel_time_from  Travel_time_to  \n",
       "0      07.07.19  Belavia               995             350  \n",
       "1      07.07.19       S7               230             225  \n",
       "2  10.07.2data9  Finnair               605             720  \n",
       "3  09.07.2data9    Swiss               365             355  \n",
       "4  11.07.2data9  Rossiya               255             250  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "\n",
    "\n",
    "df = pd.DataFrame(\n",
    "\n",
    "    {\n",
    "\n",
    "        'From': [\n",
    "\n",
    "            'Moscow',\n",
    "\n",
    "            'Moscow',\n",
    "\n",
    "            'St. Petersburg',\n",
    "\n",
    "            'St. Petersburg',\n",
    "\n",
    "            'St. Petersburg',\n",
    "\n",
    "        ],\n",
    "\n",
    "        'To': ['Rome', 'Rome', 'Rome', 'Barcelona', 'Barcelona'],\n",
    "\n",
    "        'Is_Direct': [False, True, False, False, True],\n",
    "\n",
    "        'Has_luggage': [True, False, False, True, False],\n",
    "\n",
    "        'Price': [21032, 19250, 193, 268, 31425],\n",
    "\n",
    "        'Date_From': [\n",
    "\n",
    "            'data.07.19',\n",
    "\n",
    "            'data.07.19',\n",
    "\n",
    "            '04.07.2data9',\n",
    "\n",
    "            '03.07.2data9',\n",
    "\n",
    "            '05.07.2data9',\n",
    "        ],\n",
    "\n",
    "        'Date_To': [\n",
    "\n",
    "            '07.07.19',\n",
    "\n",
    "            '07.07.19',\n",
    "\n",
    "            '10.07.2data9',\n",
    "\n",
    "            '09.07.2data9',\n",
    "\n",
    "            '11.07.2data9',\n",
    "\n",
    "        ],\n",
    "\n",
    "        'Airline': ['Belavia', 'S7', 'Finnair', 'Swiss', 'Rossiya'],\n",
    "\n",
    "        'Travel_time_from': [995, 230, 605, 365, 255],\n",
    "\n",
    "        'Travel_time_to': [350, 225, 720, 355, 250],\n",
    "    }\n",
    "\n",
    ")\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ca15de97",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>From</th>\n",
       "      <th>To</th>\n",
       "      <th>Is_Direct</th>\n",
       "      <th>Has_luggage</th>\n",
       "      <th>Price</th>\n",
       "      <th>Date_From</th>\n",
       "      <th>Date_To</th>\n",
       "      <th>Airline</th>\n",
       "      <th>Travel_time_from</th>\n",
       "      <th>Travel_time_to</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Moscow</td>\n",
       "      <td>Rome</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>19250</td>\n",
       "      <td>data.07.19</td>\n",
       "      <td>07.07.19</td>\n",
       "      <td>S7</td>\n",
       "      <td>230</td>\n",
       "      <td>225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>St. Petersburg</td>\n",
       "      <td>Rome</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>193</td>\n",
       "      <td>04.07.2data9</td>\n",
       "      <td>10.07.2data9</td>\n",
       "      <td>Finnair</td>\n",
       "      <td>605</td>\n",
       "      <td>720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>St. Petersburg</td>\n",
       "      <td>Barcelona</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>268</td>\n",
       "      <td>03.07.2data9</td>\n",
       "      <td>09.07.2data9</td>\n",
       "      <td>Swiss</td>\n",
       "      <td>365</td>\n",
       "      <td>355</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             From         To  Is_Direct  Has_luggage  Price     Date_From  \\\n",
       "1          Moscow       Rome       True        False  19250    data.07.19   \n",
       "2  St. Petersburg       Rome      False        False    193  04.07.2data9   \n",
       "3  St. Petersburg  Barcelona      False         True    268  03.07.2data9   \n",
       "\n",
       "        Date_To  Airline  Travel_time_from  Travel_time_to  \n",
       "1      07.07.19       S7               230             225  \n",
       "2  10.07.2data9  Finnair               605             720  \n",
       "3  09.07.2data9    Swiss               365             355  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[1.5 * df['Price'] < df['Price'].max()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c8399fad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.series.Series'>\n",
      "RangeIndex: 5 entries, 0 to 4\n",
      "Series name: Travel_time_to\n",
      "Non-Null Count  Dtype\n",
      "--------------  -----\n",
      "5 non-null      int64\n",
      "dtypes: int64(1)\n",
      "memory usage: 168.0 bytes\n"
     ]
    }
   ],
   "source": [
    "df['Travel_time_to'].info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "08ed390c",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "The truth value of a DataFrame is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Input \u001b[0;32mIn [33]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m df[df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mTravel_time_to\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m<\u001b[39m \u001b[38;5;241m250\u001b[39m] \u001b[38;5;129;01mand\u001b[39;00m df[df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mTravel_time_from\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m>\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m365\u001b[39m]\n",
      "File \u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/generic.py:1527\u001b[0m, in \u001b[0;36mNDFrame.__nonzero__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1525\u001b[0m \u001b[38;5;129m@final\u001b[39m\n\u001b[1;32m   1526\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__nonzero__\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[0;32m-> 1527\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m   1528\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mThe truth value of a \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mtype\u001b[39m(\u001b[38;5;28mself\u001b[39m)\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m is ambiguous. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1529\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mUse a.empty, a.bool(), a.item(), a.any() or a.all().\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1530\u001b[0m     )\n",
      "\u001b[0;31mValueError\u001b[0m: The truth value of a DataFrame is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()."
     ]
    }
   ],
   "source": [
    "df[df['Travel_time_to'] < 250] and df[df['Travel_time_from'] >= 365]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f44701a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     True\n",
       "1    False\n",
       "2     True\n",
       "3     True\n",
       "4    False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "~((df['Is_Direct']) | (df['Date_To'].isin(['04.07.2019', '10.07.2019', '11.07.2019'])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "8f3863e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>From</th>\n",
       "      <th>To</th>\n",
       "      <th>Is_Direct</th>\n",
       "      <th>Has_luggage</th>\n",
       "      <th>Price</th>\n",
       "      <th>Date_From</th>\n",
       "      <th>Date_To</th>\n",
       "      <th>Airline</th>\n",
       "      <th>Travel_time_from</th>\n",
       "      <th>Travel_time_to</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>St. Petersburg</td>\n",
       "      <td>Rome</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>193</td>\n",
       "      <td>04.07.2data9</td>\n",
       "      <td>10.07.2data9</td>\n",
       "      <td>Finnair</td>\n",
       "      <td>605</td>\n",
       "      <td>720</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             From    To  Is_Direct  Has_luggage  Price     Date_From  \\\n",
       "2  St. Petersburg  Rome      False        False    193  04.07.2data9   \n",
       "\n",
       "        Date_To  Airline  Travel_time_from  Travel_time_to  \n",
       "2  10.07.2data9  Finnair               605             720  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.query('Has_luggage == False and Airline not in [\"S7\", \"Rossiya\"]')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "88df517c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>From</th>\n",
       "      <th>To</th>\n",
       "      <th>Is_Direct</th>\n",
       "      <th>Has_luggage</th>\n",
       "      <th>Price</th>\n",
       "      <th>Date_From</th>\n",
       "      <th>Date_To</th>\n",
       "      <th>Airline</th>\n",
       "      <th>Travel_time_from</th>\n",
       "      <th>Travel_time_to</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Moscow</td>\n",
       "      <td>Rome</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>19250</td>\n",
       "      <td>data.07.19</td>\n",
       "      <td>07.07.19</td>\n",
       "      <td>S7</td>\n",
       "      <td>230</td>\n",
       "      <td>225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>St. Petersburg</td>\n",
       "      <td>Barcelona</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>31425</td>\n",
       "      <td>05.07.2data9</td>\n",
       "      <td>11.07.2data9</td>\n",
       "      <td>Rossiya</td>\n",
       "      <td>255</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             From         To  Is_Direct  Has_luggage  Price     Date_From  \\\n",
       "1          Moscow       Rome       True        False  19250    data.07.19   \n",
       "4  St. Petersburg  Barcelona       True        False  31425  05.07.2data9   \n",
       "\n",
       "        Date_To  Airline  Travel_time_from  Travel_time_to  \n",
       "1      07.07.19       S7               230             225  \n",
       "4  11.07.2data9  Rossiya               255             250  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max_time = 300\n",
    "df.query('Airline in [\"S7\", \"Belavia\", \"Rossiya\"] and Travel_time_from < @max_time')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "105b3f4a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "df = pd.read_csv('visits.csv', sep='\\t')\n",
    "df.hist(bins=10)\n",
    "plt.show()\n",
    "df.hist(bins=100)\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "05a66700",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_time</th>\n",
       "      <th>id</th>\n",
       "      <th>time_spent</th>\n",
       "      <th>name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>20180406T165358</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>98.0</td>\n",
       "      <td>Василёк</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20180404T173913</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>15.0</td>\n",
       "      <td>Василёк</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>20180403T172824</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>220.0</td>\n",
       "      <td>Василёк</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>20180407T070441</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>19.0</td>\n",
       "      <td>Василёк</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20180404T132049</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>14.0</td>\n",
       "      <td>Василёк</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>20180403T144234</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Василёк</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>20180402T082321</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>555.0</td>\n",
       "      <td>Василёк</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>20180407T003408</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>286.0</td>\n",
       "      <td>Василёк</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>20180404T084711</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>14.0</td>\n",
       "      <td>Василёк</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>20180405T131939</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>248.0</td>\n",
       "      <td>Василёк</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date_time        id  time_spent     name\n",
       "0  20180406T165358  76144fb2        98.0  Василёк\n",
       "1  20180404T173913  76144fb2        15.0  Василёк\n",
       "2  20180403T172824  76144fb2       220.0  Василёк\n",
       "3  20180407T070441  76144fb2        19.0  Василёк\n",
       "4  20180404T132049  76144fb2        14.0  Василёк\n",
       "5  20180403T144234  76144fb2         5.0  Василёк\n",
       "6  20180402T082321  76144fb2       555.0  Василёк\n",
       "7  20180407T003408  76144fb2       286.0  Василёк\n",
       "8  20180404T084711  76144fb2        14.0  Василёк\n",
       "9  20180405T131939  76144fb2       248.0  Василёк"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['time_spent'].sort_values(ascending = False)\n",
    "df.head(10)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "85e381a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5814"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.hist(column='time_spent', bins=100, range=(0,1500))\n",
    "sample.hist(column='time_spent', bins=100, range=(0,1500))\n",
    "sample = df.query('id == \"3c1e4c52\"')\n",
    "len(sample)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "a5c00dbc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['time_spent'].hist(bins=100, range=(0,1500))\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "67416b66",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0        2018-04-06 17:00:00\n",
      "1        2018-04-04 18:00:00\n",
      "2        2018-04-03 17:00:00\n",
      "3        2018-04-07 07:00:00\n",
      "4        2018-04-04 13:00:00\n",
      "                 ...        \n",
      "317099   2018-04-08 06:00:00\n",
      "317100   2018-04-03 02:00:00\n",
      "317101   2018-04-08 06:00:00\n",
      "317102   2018-04-05 23:00:00\n",
      "317103   2018-04-05 20:00:00\n",
      "Name: time_rounded, Length: 317104, dtype: datetime64[ns]\n"
     ]
    }
   ],
   "source": [
    "df['time'] = pd.to_datetime(df['date_time'], format='%Y-%m-%d %H:%M')\n",
    "df['time_rounded'] = df['time'].dt.round('1H') # округляем до ближайшего значения с шагом в один час\n",
    "print(df['time_rounded'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "ee091892",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0         4\n",
      "1         2\n",
      "2         1\n",
      "3         5\n",
      "4         2\n",
      "         ..\n",
      "317099    6\n",
      "317100    1\n",
      "317101    6\n",
      "317102    3\n",
      "317103    3\n",
      "Name: weekday, Length: 317104, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "df['weekday'] = df['time_rounded'].dt.weekday\n",
    "print(df['weekday']) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "174792c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0   2018-04-07 02:00:00\n",
       "1   2018-04-05 03:00:00\n",
       "2   2018-04-04 02:00:00\n",
       "3   2018-04-07 16:00:00\n",
       "4   2018-04-04 22:00:00\n",
       "Name: local_time, dtype: datetime64[ns]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['local_time'] = df['time_rounded'] + pd.Timedelta(hours=9)\n",
    "df['local_time'].head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "9a0345bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='time_rounded'>"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAtIAAAFACAYAAACRLJt/AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAABa1klEQVR4nO3dd3yV9fn/8ddFEpZMQVBADSoORIYgYnHEOmprrdZqtcPRam21y7Zf+4vVOkvV2mprXXVVrXuvCMg6yEb23gQIAQIBsiD78/vjvnNyEkLGyblzkvB+Ph555Jx7Xuc659znuu/7c39uc84hIiIiIiIN0ybeAYiIiIiItEQqpEVEREREoqBCWkREREQkCiqkRURERESioEJaRERERCQKKqRFRERERKJQZyFtZu3NbK6ZLTaz5WZ2vz/8cDObYGZr/f/dI+a508zWmdlqM/tGxPDhZrbUH/eEmZk/vJ2Zve0Pn2NmyQG8VhERERGRmLG6+pH2i93DnHP5ZpYETAd+C1wJ7HbOPWxmqUB359z/M7OBwJvASKAPMBE40TlXZmZz/XlnA58DTzjnxprZbcBg59wvzOxa4LvOuWtqi6tnz54uOTm5ES89egUFBRx22GFxWXdrprwGR7kNjnIbHOU2OMptcJTb4MQzt/Pnz9/lnDui+vDEumZ0XqWd7z9N8v8ccDmQ4g9/BQgB/88f/pZzrgjYaGbrgJFmlg50cc7NAjCzV4ErgLH+PPf5y3oPeNLMzNVS5ScnJzNv3ry6wg9EKBQiJSUlLutuzZTX4Ci3wVFug6PcBke5DY5yG5x45tbMNtU0vF5tpM0swcwWAVnABOfcHKC3c24bgP+/lz95X2BLxOwZ/rC+/uPqw6vM45wrBXKAHvWJTUREREQkHuo8Ig3gnCsDhppZN+BDMxtUy+RW0yJqGV7bPFUXbHYLcAtA7969CYVCtYQRnPz8/LituzVTXoOj3AZHuQ2Ochsc5TY4ym1wmmNu61VIV3DO7TWzEHAJsMPMjnLObTOzo/COVoN3pPnoiNn6AZn+8H41DI+cJ8PMEoGuwO4a1v8c8BzAiBEjXLwO7+u0TTCU1+Aot8FRboOj3AZHuQ2Ochuc5pjbOgtpMzsCKPGL6A7AhcAjwCfADcDD/v+P/Vk+Ad4ws8fwLjYcAMz1LzbMM7NRwBzgeuDfEfPcAMwCrgIm19Y+WkRERORQUVJSQkZGBoWFhfEOJa66du3KypUrA11H+/bt6devH0lJSfWavj5HpI8CXjGzBLw21e845z4zs1nAO2Z2E7AZuBrAObfczN4BVgClwC/9piEAtwIvAx3wLjIc6w9/Efiff2HibuDaekUvIiIi0splZGTQuXNnkpOT8XsOPiTl5eXRuXPnwJbvnCM7O5uMjAz69+9fr3nq02vHEmBYDcOzgQsOMs8YYEwNw+cBB7Svds4V4hfiIiIiIlKpsLDwkC+im4KZ0aNHD3bu3FnveXRnQxEREZFmTkV002honlVIi4iIiIhEQYV0M5CdX8SklTviHYaIiIhIjfbu3cvTTz8NQGZmJldddVWcI4reRx99xIoVK2KyLBXSzcClT0znplfic5dGERERkbpEFtJ9+vThvffei3NE0VMh3cpszz20u7MRERGR5i01NZX169czdOhQrr76agYN8vqOePnll7niiiu47LLL6N+/P08++SSPPfYYw4YNY9SoUeze7d0WZP369VxyySUMHz6cc845h1WrVh10Xe+++y6DBg1iyJAhnHvuueH1XHvttVxyySWcdNJJ3H///eHpX3vtNUaOHMnQoUP5+c9/TlmZ11lcp06duOuuuxgyZAijRo1ix44dzJw5k08++YQ77riDoUOHsn79+kblpUE3ZBEREWmtysodGXv2cWyPw+IdishB3f/pclZk5sZ0mQP7dOHey06tdZqHH36YZcuWsWjRItLT0/n2t78dHrds2TIWLlxIYWEhJ5xwAo888ggLFy7kd7/7Ha+++iq33347t9xyC88++ywDBgxgzpw53HbbbUyePLnGdT3wwAOMHz+evn37snfv3vDw+fPns3z5cjp27MgZZ5zBpZdeymGHHcbbb7/NjBkzSEpK4rbbbuP111/n+uuvp6CggFGjRjFmzBj++Mc/8vzzz3P33Xfzne98h29/+9sxaZ6iQlpERAT4v3cX8+HCrcz50wX07tI+3uGItBjnn38+nTt3pnPnznTt2pXLLrsMgNNOO40lS5aQn5/PzJkzufrqyp6Oi4qKDrq80aNHc+ONN/L973+fK6+8ssp6evToAcCVV17J9OnTSUxMZP78+ZxxxhkA7N+/n169egHQtm3bcME/fPhwJkyYENsXjgppERERAFZtzwNgV36RCmmJyqbsAt5fU0yQd7Gu68hxPLRr1y78uE2bNuHnbdq0obS0lPLycrp168aiRYvqtbxnn32WOXPmkJaWxtChQ8PzVe+azsxwznHDDTfw0EMPHbCcpKSk8DwJCQmUlpZG8epqpzbSIiIiIjHw/f/M4tMNJewrjn3BFm+dO3cmLy8vqnm7dOlC//79effddwHvDoKLFy8+6PTr16/nzDPP5IEHHqBnz55s2bIFgClTprB7927279/PRx99xOjRo7ngggt47733yMrKAmD37t1s2rQpsNdSnQppERERkRgoKPIucisrd3GOJPZ69OjB6NGjGTRoEHfccUeD53/99dd58cUXGTJkCKeeeioff/zxQae94447OO200xg0aBDnnnsuQ4YMAeCss87iuuuuY+jQoXzve99jxIgRDBw4kL/85S9cfPHFDB48mIsuuoht27bVGsu1117Lo48+yrBhw3SxoYiIiIgE74033jhg2I033siNN94Yfp6enl7juP79+zNu3Lh6reeDDz6ocXjPnj157rnnDhh+zTXXcM011xwwPD8/P/z4qquuCl9cOHr0aHV/JyIiIiISTzoiLSIiIiJNbsyYMeF20xWuvvpq7rrrrgOmvfHGG/ne977XVKHVmwppEREREWlyd911V41Fc0uiph0iIiIizZxzre8CxuaooXlWIS0iIiLSjLVv357s7GwV0wFzzpGdnU379vXvR15NO0RERESasX79+pGRkcHOnTvjHUpcFRYWNqjIjUb79u3p169fvadXIS0iIiLSjCUlJdG/f/94hxF3oVCIYcOGxTuMKtS0Q0REREQkCiqkRURERESioEJaRERERCQKKqRFRERERKKgQlpEREREJAoqpEVEREREoqBCWkREREQkCiqkRURERESioEJaRERERCQKKqRFRERERKKgQlpEREREJAoqpEVEREREolBnIW1mR5vZFDNbaWbLzey3/vD7zGyrmS3y/74VMc+dZrbOzFab2Tcihg83s6X+uCfMzPzh7czsbX/4HDNLDuC1ioiIiIjETH2OSJcCf3DOnQKMAn5pZgP9cY8754b6f58D+OOuBU4FLgGeNrMEf/pngFuAAf7fJf7wm4A9zrkTgMeBRxr/0kREREREglNnIe2c2+acW+A/zgNWAn1rmeVy4C3nXJFzbiOwDhhpZkcBXZxzs5xzDngVuCJinlf8x+8BF1QcrRYRERERaY4a1Eba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\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sample = df.query('id == \"3c1e4c52\"')\n",
    "df.pivot_table(index=['time_rounded'], values=['time_spent'], aggfunc='count')\n",
    "df.plot(x='time_rounded', y='time_spent', grid=True, figsize=(12, 5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "860cbfc5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='date_hour'>"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['date_time'] = pd.to_datetime(\n",
    "    df['date_time'], format='%Y-%m-%dT%H:%M:%S')\n",
    "df['local_time'] = df['date_time'] + pd.Timedelta(hours=3)\n",
    "df['date_hour'] = df['local_time'].dt.round('1H')\n",
    "(df.query('id == \"3c1e4c52\"')\n",
    "    .pivot_table(index='date_hour', values='time_spent')\n",
    "    .plot(grid=True, figsize=(12, 5))) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "79b7cddd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.42213910893586964\n"
     ]
    }
   ],
   "source": [
    "print(len(df.query('time_spent < 60')) / len(df))  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "4f52e108",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_time</th>\n",
       "      <th>id</th>\n",
       "      <th>time_spent</th>\n",
       "      <th>name</th>\n",
       "      <th>time</th>\n",
       "      <th>time_rounded</th>\n",
       "      <th>weekday</th>\n",
       "      <th>local_time</th>\n",
       "      <th>date_hour</th>\n",
       "      <th>too_fast</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-04-06 16:53:58</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>98.0</td>\n",
       "      <td>Василёк</td>\n",
       "      <td>2018-04-06 16:53:58</td>\n",
       "      <td>2018-04-06 17:00:00</td>\n",
       "      <td>4</td>\n",
       "      <td>2018-04-06 19:53:58</td>\n",
       "      <td>2018-04-06 20:00:00</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-04-04 17:39:13</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>15.0</td>\n",
       "      <td>Василёк</td>\n",
       "      <td>2018-04-04 17:39:13</td>\n",
       "      <td>2018-04-04 18:00:00</td>\n",
       "      <td>2</td>\n",
       "      <td>2018-04-04 20:39:13</td>\n",
       "      <td>2018-04-04 21:00:00</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-04-03 17:28:24</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>220.0</td>\n",
       "      <td>Василёк</td>\n",
       "      <td>2018-04-03 17:28:24</td>\n",
       "      <td>2018-04-03 17:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>2018-04-03 20:28:24</td>\n",
       "      <td>2018-04-03 20:00:00</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-04-07 07:04:41</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>19.0</td>\n",
       "      <td>Василёк</td>\n",
       "      <td>2018-04-07 07:04:41</td>\n",
       "      <td>2018-04-07 07:00:00</td>\n",
       "      <td>5</td>\n",
       "      <td>2018-04-07 10:04:41</td>\n",
       "      <td>2018-04-07 10:00:00</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-04-04 13:20:49</td>\n",
       "      <td>76144fb2</td>\n",
       "      <td>14.0</td>\n",
       "      <td>Василёк</td>\n",
       "      <td>2018-04-04 13:20:49</td>\n",
       "      <td>2018-04-04 13:00:00</td>\n",
       "      <td>2</td>\n",
       "      <td>2018-04-04 16:20:49</td>\n",
       "      <td>2018-04-04 16:00:00</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            date_time        id  time_spent     name                time  \\\n",
       "0 2018-04-06 16:53:58  76144fb2        98.0  Василёк 2018-04-06 16:53:58   \n",
       "1 2018-04-04 17:39:13  76144fb2        15.0  Василёк 2018-04-04 17:39:13   \n",
       "2 2018-04-03 17:28:24  76144fb2       220.0  Василёк 2018-04-03 17:28:24   \n",
       "3 2018-04-07 07:04:41  76144fb2        19.0  Василёк 2018-04-07 07:04:41   \n",
       "4 2018-04-04 13:20:49  76144fb2        14.0  Василёк 2018-04-04 13:20:49   \n",
       "\n",
       "         time_rounded  weekday          local_time           date_hour  \\\n",
       "0 2018-04-06 17:00:00        4 2018-04-06 19:53:58 2018-04-06 20:00:00   \n",
       "1 2018-04-04 18:00:00        2 2018-04-04 20:39:13 2018-04-04 21:00:00   \n",
       "2 2018-04-03 17:00:00        1 2018-04-03 20:28:24 2018-04-03 20:00:00   \n",
       "3 2018-04-07 07:00:00        5 2018-04-07 10:04:41 2018-04-07 10:00:00   \n",
       "4 2018-04-04 13:00:00        2 2018-04-04 16:20:49 2018-04-04 16:00:00   \n",
       "\n",
       "   too_fast  \n",
       "0     False  \n",
       "1      True  \n",
       "2     False  \n",
       "3      True  \n",
       "4      True  "
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "too_fast = df.query('time_spent < 60')\n",
    "df['too_fast'] = df['time_spent'] < 60\n",
    "df.head(5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "0fc551ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.42213910893586964"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['too_fast'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "eaf22011",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>too_fast</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>00ca1b70</th>\n",
       "      <td>0.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>011f7462</th>\n",
       "      <td>0.637489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>015eaddd</th>\n",
       "      <td>0.726190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0178ce70</th>\n",
       "      <td>0.211538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>018a83ef</th>\n",
       "      <td>0.510269</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          too_fast\n",
       "id                \n",
       "00ca1b70  0.250000\n",
       "011f7462  0.637489\n",
       "015eaddd  0.726190\n",
       "0178ce70  0.211538\n",
       "018a83ef  0.510269"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "too_fast_sts = df.pivot_table(index='id', values='too_fast')\n",
    "too_fast_sts.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "216e8066",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<AxesSubplot:title={'center':'too_fast'}>]], dtype=object)"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "too_fast_sts.hist(bins=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "2db50845",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<AxesSubplot:title={'center':'too_slow'}>]], dtype=object)"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['too_slow'] = df['time_spent'] > 1000\n",
    "df.pivot_table(index='id', values='too_slow').hist(bins=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "57f5d375",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'time_spent'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py:3621\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3620\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 3621\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3622\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/_libs/index.pyx:136\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/_libs/index.pyx:163\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32mpandas/_libs/hashtable_class_helper.pxi:5198\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32mpandas/_libs/hashtable_class_helper.pxi:5206\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'time_spent'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Input \u001b[0;32mIn [74]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m df \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mread_csv(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mvisits.csv\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m----> 2\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtoo_fast\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[43mdf\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mtime_spent\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m \u001b[38;5;241m<\u001b[39m \u001b[38;5;241m60\u001b[39m\n\u001b[1;32m      4\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtoo_slow\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtime_spent\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1000\u001b[39m\n\u001b[1;32m      6\u001b[0m too_fast_stat \u001b[38;5;241m=\u001b[39m df\u001b[38;5;241m.\u001b[39mpivot_table(index\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mid\u001b[39m\u001b[38;5;124m'\u001b[39m, values\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtoo_fast\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "File \u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py:3505\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3503\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnlevels \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m   3504\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_multilevel(key)\n\u001b[0;32m-> 3505\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3506\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[1;32m   3507\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m [indexer]\n",
      "File \u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py:3623\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3621\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine\u001b[38;5;241m.\u001b[39mget_loc(casted_key)\n\u001b[1;32m   3622\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[0;32m-> 3623\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[1;32m   3624\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m   3625\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[1;32m   3626\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[1;32m   3627\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[1;32m   3628\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n",
      "\u001b[0;31mKeyError\u001b[0m: 'time_spent'"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8775fa77",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
